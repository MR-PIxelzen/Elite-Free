				#------------------------------------------------------------------------
				# Source File Information (DO NOT MODIFY)
				# Source ID: a2c9ec07-14c9-449c-8432-4e5b26849601
				# Source File: ..\Documents\SAPIEN\PowerShell Studio\Files\Display-Scaling-Options.psf
				#------------------------------------------------------------------------
				#region File Recovery Data (DO NOT MODIFY)
				<#RecoveryData:
				
				#endregion
				
				<#
					.NOTES
					--------------------------------------------------------------------------------
					Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2024 v5.8.243 (L)
					Generated on:       7/24/2024 7:33 AM
					Generated by:       PIXZEN
					--------------------------------------------------------------------------------
					.DESCRIPTION
						GUI script generated by PowerShell Studio 2024
				#>
				
				
				#----------------------------------------------
				#region Application Functions
				#----------------------------------------------
				
				#endregion Application Functions
				
				#----------------------------------------------
				# Generated Form Function
				#----------------------------------------------

					#----------------------------------------------
					#region Import the Assemblies
					#----------------------------------------------
				# Load Windows Forms assembly
				Add-Type -AssemblyName System.Windows.Forms
				Add-Type -AssemblyName System.Drawing

# Define the native method for overriding WndProc
Add-Type @"
using System;
using System.Windows.Forms;

public class CustomForm : Form {
    private const int WM_NCHITTEST = 0x84;
    private const int HTCLIENT = 0x1;
    private const int HTCAPTION = 0x2;

    protected override void WndProc(ref Message m) {
        base.WndProc(ref m);
        if (m.Msg == WM_NCHITTEST && (int)m.Result == HTCLIENT) {
            m.Result = (IntPtr)HTCAPTION;
        }
    }
}
"@ -ReferencedAssemblies "System.Windows.Forms", "System.Drawing"
			#endregion Import Assemblies
		
			#----------------------------------------------
			#region Generated Form Objects
			#----------------------------------------------
			[System.Windows.Forms.Application]::EnableVisualStyles()
			$formDisplayScalingOption = New-Object CustomForm
			$checkboxOverrideTheScalingMo = New-Object 'System.Windows.Forms.CheckBox'
			$radiobuttonAspectRatio = New-Object 'System.Windows.Forms.RadioButton'
			$labelSelectDisplayScaling = New-Object 'System.Windows.Forms.Label'
			$radiobuttonNoscaling = New-Object 'System.Windows.Forms.RadioButton'
			$radiobuttonFullScreen = New-Object 'System.Windows.Forms.RadioButton'
			$radiobuttonNoScalingControlledB = New-Object 'System.Windows.Forms.RadioButton'
			$tooltipcheckboxOverrideTheScalingMo = New-Object 'System.Windows.Forms.ToolTip'
			$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
			#endregion Generated Form Objects
		
			#----------------------------------------------
			# User Generated Script
			#----------------------------------------------
			
			$formDisplayScalingOption_Load={
				#TODO: Initialize Form Controls here
				
			}
			
			$labelSelectDisplayScaling_Click={
				#TODO: Place custom script here
				
			}
			
			$radiobuttonNoScalingControlledB_CheckedChanged={
				#TODO: Place custom script here
				
			}
			
			$checkboxOverrideTheScalingMo_CheckedChanged = {
				if ($checkboxOverrideTheScalingMo.Checked) {
					$radiobuttonNoScalingControlledB.Checked = $True
		
										#$host.ui.RawUI.WindowTitle = 'reg_own - lean and mean snippet by AveYo, 2018-2022'
		<#
			[FEATURES]
			- parameters after key are optional; if -owner if ommited, try to preserve existing
			- enable inherited rights / disable / delete entries with -recurse Inherit / Replace / Delete
			- add -list to show summary even when regedit fails; no low-level registry functions used        
			- can copy-paste snippet directly in powershell (admin) console then use it manually
			[USAGE]
			- First copy-paste reg_own snippet before .ps1 script content
			- Then call it anywhere (after elevation) to change registry security:
			reg_own "key" -recurse Replace -user S-1-5-32-545 -owner S-1-1-0 -acc Allow -perm FullControl
		#>
		
		#########################################################
		# copy-paste reg_own snippet before .ps1 script content #
		#########################################################
		
		function reg_own { param ( $key, $recurse='', $user='S-1-5-32-544', $owner='', $acc='Allow', $perm='FullControl', [switch]$list )
		$D1=[uri].module.gettype('System.Diagnostics.Process')."GetM`ember"('SetPrivilege',42)[0]; $u=$user; $o=$owner; $p=524288  
		'SeSecurityPrivilege','SeTakeOwnershipPrivilege','SeBackupPrivilege','SeRestorePrivilege' |% {$D1.Invoke($null, @("$_",2))}
		$reg=$key-split':?\\',2; $key=$reg-join'\'; $HK=gi -lit Registry::$($reg[0]) -force; $re=$recurse; $in=(1,0)[$re-eq'Inherit']
		$own=$o-eq''; if($own){$o=$u}; $sid=[Security.Principal.SecurityIdentifier]; $w='S-1-1-0',$u,$o |% {new-object $sid($_)}
		$r=($w[0],$p,1,0,0),($w[1],$perm,1,0,$acc) |% {new-object Security.AccessControl.RegistryAccessRule($_)}; function _own($k,$l) {
		$t=$HK.OpenSubKey($k,2,'TakeOwnership'); if($t) { try {$n=$t.GetAccessControl(4)} catch {$n=$HK.GetAccessControl(4)}
		$u=$n.GetOwner($sid); if($own-and $u) {$w[2]=$u}; $n.SetOwner($w[0]); $t.SetAccessControl($n); $d=$HK.GetAccessControl(2)
		$c=$HK.OpenSubKey($k,2,'ChangePermissions'); $b=$c.GetAccessControl(2); $d.RemoveAccessRuleAll($r[1]); $d.ResetAccessRule($r[0])
		$c.SetAccessControl($d); if($re-ne'') {$sk=$HK.OpenSubKey($k).GetSubKeyNames(); foreach($i in $sk) {_own "$k\$i" $false}}
		if($re-ne'') {$b.SetAccessRuleProtection($in,1)}; $b.ResetAccessRule($r[1]); if($re-eq'Delete') {$b.RemoveAccessRuleAll($r[1])} 
		$c.SetAccessControl($b); $b,$n |% {$_.SetOwner($w[2])}; $t.SetAccessControl($n)}; if($l) {return $b|fl} }; _own $reg[1] $list
		} # lean & mean snippet by AveYo, 2022.01.15
		
		#######################
		# .ps1 script content #
		#######################
		
		#### Define TI sid (TrustedInstaller)
		$TI = (sc.exe showsid TrustedInstaller)-split': '|?{$_-like'*S-1-*'}
		
		#### Define USER sid before asking for elevation since it gets replaced for limited accounts
		if ($null -eq $USER) {$USER = ((whoami /user)-split' ')[-1]}
		
		#### Ask for elevation passing USER
		$admin = fltmc; if ($LASTEXITCODE) {
		$arg = "-nop -c `$USER='$USER'; iex((gc '$($MyInvocation.MyCommand.Path-replace'''','''''')')-join'`n')" 
		start powershell -verb runas -args $arg; exit
		}
		
	
		reg_own 'HKLM\System\ControlSet001\Services\nvlddmkm' -recurse Replace -user S-1-1-0 -list
		
		Clear-Host

		# Uncheck "Override the scaling mode set by games and programs"
		$regPath = "HKLM:\System\ControlSet001\Services\nvlddmkm\State\DisplayDatabase"
		$keys = Get-ChildItem -Path $regPath -Recurse | Where-Object { $_.Property -contains "ScalingConfig" }
		
		foreach ($key in $keys) {
		Set-ItemProperty -Path $key.PSPath -Name "ScalingConfig" -Type Binary -Value ([byte[]](0xDB,0x01,0x00,0x00,0x10,0x00,0x00,0x00,0x89,0x00,0x00,0x00,0x75,0x01,0x00,0x00))
		}
		
		
					[System.Windows.Forms.MessageBox]::Show("Override the scaling mode set by games and programs is checked.", "Success", [System.Windows.Forms.MessageBoxButtons]::OK)
				} else {
					$radiobuttonNoScalingControlledB.Checked = $false
					[System.Windows.Forms.MessageBox]::Show("Override the scaling mode set by games and programs is unchecked.", "Success", [System.Windows.Forms.MessageBoxButtons]::OK)
					#$host.ui.RawUI.WindowTitle = 'reg_own - lean and mean snippet by AveYo, 2018-2022'
		<#
			[FEATURES]
			- parameters after key are optional; if -owner if ommited, try to preserve existing
			- enable inherited rights / disable / delete entries with -recurse Inherit / Replace / Delete
			- add -list to show summary even when regedit fails; no low-level registry functions used        
			- can copy-paste snippet directly in powershell (admin) console then use it manually
			[USAGE]
			- First copy-paste reg_own snippet before .ps1 script content
			- Then call it anywhere (after elevation) to change registry security:
			reg_own "key" -recurse Replace -user S-1-5-32-545 -owner S-1-1-0 -acc Allow -perm FullControl
		#>
		
		#########################################################
		# copy-paste reg_own snippet before .ps1 script content #
		#########################################################
		
		function reg_own { param ( $key, $recurse='', $user='S-1-5-32-544', $owner='', $acc='Allow', $perm='FullControl', [switch]$list )
		$D1=[uri].module.gettype('System.Diagnostics.Process')."GetM`ember"('SetPrivilege',42)[0]; $u=$user; $o=$owner; $p=524288  
		'SeSecurityPrivilege','SeTakeOwnershipPrivilege','SeBackupPrivilege','SeRestorePrivilege' |% {$D1.Invoke($null, @("$_",2))}
		$reg=$key-split':?\\',2; $key=$reg-join'\'; $HK=gi -lit Registry::$($reg[0]) -force; $re=$recurse; $in=(1,0)[$re-eq'Inherit']
		$own=$o-eq''; if($own){$o=$u}; $sid=[Security.Principal.SecurityIdentifier]; $w='S-1-1-0',$u,$o |% {new-object $sid($_)}
		$r=($w[0],$p,1,0,0),($w[1],$perm,1,0,$acc) |% {new-object Security.AccessControl.RegistryAccessRule($_)}; function _own($k,$l) {
		$t=$HK.OpenSubKey($k,2,'TakeOwnership'); if($t) { try {$n=$t.GetAccessControl(4)} catch {$n=$HK.GetAccessControl(4)}
		$u=$n.GetOwner($sid); if($own-and $u) {$w[2]=$u}; $n.SetOwner($w[0]); $t.SetAccessControl($n); $d=$HK.GetAccessControl(2)
		$c=$HK.OpenSubKey($k,2,'ChangePermissions'); $b=$c.GetAccessControl(2); $d.RemoveAccessRuleAll($r[1]); $d.ResetAccessRule($r[0])
		$c.SetAccessControl($d); if($re-ne'') {$sk=$HK.OpenSubKey($k).GetSubKeyNames(); foreach($i in $sk) {_own "$k\$i" $false}}
		if($re-ne'') {$b.SetAccessRuleProtection($in,1)}; $b.ResetAccessRule($r[1]); if($re-eq'Delete') {$b.RemoveAccessRuleAll($r[1])} 
		$c.SetAccessControl($b); $b,$n |% {$_.SetOwner($w[2])}; $t.SetAccessControl($n)}; if($l) {return $b|fl} }; _own $reg[1] $list
		} # lean & mean snippet by AveYo, 2022.01.15
		
		#######################
		# .ps1 script content #
		#######################
		
		#### Define TI sid (TrustedInstaller)
		$TI = (sc.exe showsid TrustedInstaller)-split': '|?{$_-like'*S-1-*'}
		
		#### Define USER sid before asking for elevation since it gets replaced for limited accounts
		if ($null -eq $USER) {$USER = ((whoami /user)-split' ')[-1]}
		
		#### Ask for elevation passing USER
		$admin = fltmc; if ($LASTEXITCODE) {
		$arg = "-nop -c `$USER='$USER'; iex((gc '$($MyInvocation.MyCommand.Path-replace'''','''''')')-join'`n')" 
		start powershell -verb runas -args $arg; exit
		}
		
		#### Setup a test key
		
		reg_own 'HKLM\System\ControlSet001\Services\nvlddmkm' -recurse Replace -user S-1-1-0 -list
		
		Clear-Host
		
		#Write-Output ""
		#Write-Output "Unchecking 'Override the scaling mode set by games and programs'"
		#Write-Output ""
		
		# Uncheck "Override the scaling mode set by games and programs"
		$regPath = "HKLM:\System\ControlSet001\Services\nvlddmkm\State\DisplayDatabase"
		$keys = Get-ChildItem -Path $regPath -Recurse | Where-Object { $_.Property -contains "ScalingConfig" }
		
		foreach ($key in $keys) {
		Set-ItemProperty -Path $key.PSPath -Name "ScalingConfig" -Type Binary -Value ([byte[]](0xDB,0x01,0x00,0x00,0x10,0x00,0x00,0x00,0x81,0x00,0x00,0x00,0x6D,0x01,0x00,0x00))
		}
		
		
				}
			}
			
			$okButton_Click = {
				$selectedOption = @($radiobuttonNoScalingControlledB, $radiobuttonNoscaling, $radiobuttonFullScreen, $radiobuttonAspectRatio) | Where-Object { $_.Checked } | Select-Object -First 1
			
				if ($selectedOption -eq $null) {
					[System.Windows.Forms.MessageBox]::Show("Please select an option.")
				} else {
					$scaling = @($radiobuttonNoScalingControlledB, $radiobuttonNoscaling, $radiobuttonFullScreen, $radiobuttonAspectRatio).IndexOf($selectedOption) + 1
					$selectedText = $selectedOption.Text
			
					# Update the registry values
					$regPath = "HKLM:\SYSTEM\CurrentControlSet\Control\GraphicsDrivers"
					$regKeys = Get-ChildItem -Path $regPath -Recurse | Where-Object { $_.Name -match 'Configuration\\.*\\00' }
					foreach ($key in $regKeys) {
						Set-ItemProperty -Path $key.PSPath -Name "Scaling" -Value $scaling
						Write-Host "Set-ItemProperty -Path $key.PSPath -Name "Scaling" -Value $scaling"
					}
			
					# Uncomment the following line if you want to restart the graphics driver
					# Start-Process "$PSScriptRoot\_FILES\restart64.exe"
					# Get the PNPDevice ID for the NVIDIA GPU
					$gpu = Get-PnpDevice -Class Display | Where-Object { $_.FriendlyName -like "*NVIDIA*" }
					
					if ($gpu) {
						$gpuId = $gpu.InstanceId
						
						# Disable the NVIDIA GPU
						Disable-PnpDevice -InstanceId $gpuId -Confirm:$false
						Start-Sleep -Seconds 1  # Wait for 5 seconds
						# Enable the NVIDIA GPU
						Enable-PnpDevice -InstanceId $gpuId -Confirm:$false
						Write-Output "NVIDIA GPU restarted successfully."
						Clear-Host
					} else {
						Write-Output "NVIDIA GPU not found."
						Clear-Host
					}
		
					[System.Windows.Forms.MessageBox]::Show("The selected option '$selectedText' has been applied.", "Success", [System.Windows.Forms.MessageBoxButtons]::OK)
					$formDisplayScalingOption.Close()
				}
			}
			
			
			# --End User Generated Script--
			#----------------------------------------------
			#region Generated Events
			#----------------------------------------------
			
			$Form_StateCorrection_Load=
			{
				#Correct the initial state of the form to prevent the .Net maximized form issue
				$formDisplayScalingOption.WindowState = $InitialFormWindowState
			}
			
			$Form_Cleanup_FormClosed=
			{
				#Remove all event handlers from the controls
				try
				{
					$checkboxOverrideTheScalingMo.remove_CheckedChanged($checkboxOverrideTheScalingMo_CheckedChanged)
					$labelSelectDisplayScaling.remove_Click($labelSelectDisplayScaling_Click)
					$radiobuttonNoScalingControlledB.remove_CheckedChanged($radiobuttonNoScalingControlledB_CheckedChanged)
					$formDisplayScalingOption.remove_Load($formDisplayScalingOption_Load)
					$formDisplayScalingOption.remove_Load($Form_StateCorrection_Load)
					$formDisplayScalingOption.remove_FormClosed($Form_Cleanup_FormClosed)
				}
				catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
				$formDisplayScalingOption.Dispose()
				$radiobuttonNoScalingControlledB.Dispose()
				$radiobuttonFullScreen.Dispose()
				$radiobuttonNoscaling.Dispose()
				$labelSelectDisplayScaling.Dispose()
				$radiobuttonAspectRatio.Dispose()
				$checkboxOverrideTheScalingMo.Dispose()
				$tooltipcheckboxOverrideTheScalingMo.Dispose()
			}
			#endregion Generated Events
		
			#----------------------------------------------
			#region Generated Form Code
			#----------------------------------------------
			$formDisplayScalingOption.SuspendLayout()
			#
			# formDisplayScalingOption
			#
			$formDisplayScalingOption.Controls.Add($checkboxOverrideTheScalingMo)
			$formDisplayScalingOption.Controls.Add($radiobuttonAspectRatio)
			$formDisplayScalingOption.Controls.Add($labelSelectDisplayScaling)
			$formDisplayScalingOption.Controls.Add($radiobuttonNoscaling)
			$formDisplayScalingOption.Controls.Add($radiobuttonFullScreen)
			$formDisplayScalingOption.Controls.Add($radiobuttonNoScalingControlledB)
			$formDisplayScalingOption.AutoScaleDimensions = New-Object System.Drawing.SizeF(6, 13)
			$formDisplayScalingOption.AutoScaleMode = 'Font'
			$formDisplayScalingOption.AutoSize = $True
			$formDisplayScalingOption.BackColor = [System.Drawing.SystemColors]::ActiveCaptionText 
			$formDisplayScalingOption.ClientSize = New-Object System.Drawing.Size(609, 247)
			$formDisplayScalingOption.FormBorderStyle = 'FixedSingle'
			$formDisplayScalingOption.MaximizeBox = $False
			$formDisplayScalingOption.MinimizeBox = $False
			$formDisplayScalingOption.Name = 'formDisplayScalingOption'
			$formDisplayScalingOption.ShowIcon = $False
			$formDisplayScalingOption.ShowInTaskbar = $False
			$formDisplayScalingOption.StartPosition = 'CenterScreen'
			$formDisplayScalingOption.Text = 'Display Scaling Options NV only'
			$formDisplayScalingOption.add_Load($formDisplayScalingOption_Load)
			#
			# checkboxOverrideTheScalingMo
			#
			$checkboxOverrideTheScalingMo.FlatStyle = 'Flat'
			$checkboxOverrideTheScalingMo.Font = [System.Drawing.Font]::new('Microsoft YaHei UI', '8.25', [System.Drawing.FontStyle]'Bold')
			$checkboxOverrideTheScalingMo.ForeColor = [System.Drawing.SystemColors]::ButtonHighlight 
			$checkboxOverrideTheScalingMo.Location = New-Object System.Drawing.Point(12, 199)
			$checkboxOverrideTheScalingMo.Name = 'checkboxOverrideTheScalingMo'
			$checkboxOverrideTheScalingMo.Size = New-Object System.Drawing.Size(321, 24)
			$checkboxOverrideTheScalingMo.TabIndex = 6
			$checkboxOverrideTheScalingMo.Text = 'Override the scaling mode set by games and programs'
			$checkboxOverrideTheScalingMo.UseVisualStyleBackColor = $True
			$checkboxOverrideTheScalingMo.add_CheckedChanged($checkboxOverrideTheScalingMo_CheckedChanged)
			#
			# radiobuttonAspectRatio
			#
			$radiobuttonAspectRatio.FlatAppearance.BorderColor = [System.Drawing.Color]::White 
			$radiobuttonAspectRatio.Font = [System.Drawing.Font]::new('Segoe Script', '11.25', [System.Drawing.FontStyle]'Bold')
			$radiobuttonAspectRatio.ForeColor = [System.Drawing.Color]::FromArgb(255, 224, 224, 224)
			$radiobuttonAspectRatio.Location = New-Object System.Drawing.Point(12, 129)
			$radiobuttonAspectRatio.Name = 'radiobuttonAspectRatio'
			$radiobuttonAspectRatio.Size = New-Object System.Drawing.Size(128, 24)
			$radiobuttonAspectRatio.TabIndex = 5
			$radiobuttonAspectRatio.Text = 'Aspect ratio'
			$radiobuttonAspectRatio.UseVisualStyleBackColor = $True
			#
			# labelSelectDisplayScaling
			#
			$labelSelectDisplayScaling.AutoSize = $True
			$labelSelectDisplayScaling.FlatStyle = 'Flat'
			$labelSelectDisplayScaling.Font = [System.Drawing.Font]::new('Microsoft YaHei', '8.25', [System.Drawing.FontStyle]'Bold')
			$labelSelectDisplayScaling.ForeColor = [System.Drawing.Color]::Gainsboro 
			$labelSelectDisplayScaling.Location = New-Object System.Drawing.Point(233, 9)
			$labelSelectDisplayScaling.Name = 'labelSelectDisplayScaling'
			$labelSelectDisplayScaling.Size = New-Object System.Drawing.Size(168, 16)
			$labelSelectDisplayScaling.TabIndex = 4
			$labelSelectDisplayScaling.Text = 'Select Display Scaling Option:'
			$labelSelectDisplayScaling.add_Click($labelSelectDisplayScaling_Click)
			#
			# radiobuttonNoscaling
			#
			$radiobuttonNoscaling.FlatAppearance.BorderColor = [System.Drawing.Color]::White 
			$radiobuttonNoscaling.Font = [System.Drawing.Font]::new('Segoe Script', '11.25', [System.Drawing.FontStyle]'Bold')
			$radiobuttonNoscaling.ForeColor = [System.Drawing.Color]::FromArgb(255, 224, 224, 224)
			$radiobuttonNoscaling.Location = New-Object System.Drawing.Point(12, 69)
			$radiobuttonNoscaling.Name = 'radiobuttonNoscaling'
			$radiobuttonNoscaling.Size = New-Object System.Drawing.Size(357, 24)
			$radiobuttonNoscaling.TabIndex = 3
			$radiobuttonNoscaling.Text = 'No Scaling controlled by the GPU driver'
			$radiobuttonNoscaling.UseVisualStyleBackColor = $True
			#
			# radiobuttonFullScreen
			#
			$radiobuttonFullScreen.FlatAppearance.BorderColor = [System.Drawing.Color]::White 
			$radiobuttonFullScreen.Font = [System.Drawing.Font]::new('Segoe Script', '11.25', [System.Drawing.FontStyle]'Bold')
			$radiobuttonFullScreen.ForeColor = [System.Drawing.Color]::FromArgb(255, 224, 224, 224)
			$radiobuttonFullScreen.Location = New-Object System.Drawing.Point(12, 99)
			$radiobuttonFullScreen.Name = 'radiobuttonFullScreen'
			$radiobuttonFullScreen.Size = New-Object System.Drawing.Size(128, 24)
			$radiobuttonFullScreen.TabIndex = 2
			$radiobuttonFullScreen.Text = 'Full-Screen'
			$radiobuttonFullScreen.UseVisualStyleBackColor = $True
			#
			# radiobuttonNoScalingControlledB
			#
			#$radiobuttonNoScalingControlledB.Checked = $True
			$radiobuttonNoScalingControlledB.FlatAppearance.BorderColor = [System.Drawing.Color]::White 
			$radiobuttonNoScalingControlledB.Font = [System.Drawing.Font]::new('Segoe Script', '11.25', [System.Drawing.FontStyle]'Bold')
			$radiobuttonNoScalingControlledB.ForeColor = [System.Drawing.Color]::FromArgb(255, 224, 224, 224)
			$radiobuttonNoScalingControlledB.Location = New-Object System.Drawing.Point(12, 39)
			$radiobuttonNoScalingControlledB.Name = 'radiobuttonNoScalingControlledB'
			$radiobuttonNoScalingControlledB.Size = New-Object System.Drawing.Size(604, 24)
			$radiobuttonNoScalingControlledB.TabIndex = 1
			$radiobuttonNoScalingControlledB.TabStop = $True
			$radiobuttonNoScalingControlledB.Text = 'No Scaling controlled by the program/operating system (recommended)'
			$radiobuttonNoScalingControlledB.UseVisualStyleBackColor = $True
			$radiobuttonNoScalingControlledB.add_CheckedChanged($radiobuttonNoScalingControlledB_CheckedChanged)
		
			$okButton = New-Object 'System.Windows.Forms.Button'
			$okButton.Text = "Apply"
			$okButton.Location = New-Object System.Drawing.Point(258, 170)
			$okButton.Size = New-Object System.Drawing.Size(75, 23)
			$okButton.TabIndex = 7
			$okButton.FlatAppearance.BorderColor = [System.Drawing.Color]::DarkOrchid 
			$okButton.FlatAppearance.MouseDownBackColor = [System.Drawing.Color]::Gray 
			$okButton.FlatAppearance.MouseOverBackColor = [System.Drawing.Color]::Thistle 
			$okButton.FlatStyle = 'Flat'
			$okButton.ForeColor = [System.Drawing.Color]::WhiteSmoke 
			$okButton.TabIndex = 7
			$okButton.UseVisualStyleBackColor = $True
			$formDisplayScalingOption.Controls.Add($okButton)
			$okButton.add_Click($okButton_Click)
			#
			# tooltipcheckboxOverrideTheScalingMo
			#
			#$ToolTip = New-Object System.Windows.Forms.ToolTip
			##$ToolTip.SetToolTip($checkboxOverrideTheScalingMo, "Removes and uninstalls Nvidia Telemetry")
			#$checkboxOverrideTheScalingMo.IsBalloon = $True
			#$checkboxOverrideTheScalingMo.OwnerDraw = $True
			#$checkboxOverrideTheScalingMo.ShowAlways = $True
			#$checkboxOverrideTheScalingMo.Tag = 'unchecked if you don''t have integrated display Scaling'
			$ToolTip = New-Object System.Windows.Forms.ToolTip
			$ToolTip.SetToolTip($checkboxOverrideTheScalingMo, "unchecked if you don''t have integrated display Scaling")
			# https://www.nvidia.com/content/Control-Panel-Help/vLatest/en-us/mergedProjects/nvdsp/CS_Display_Scaling.htm
			$ToolTip = New-Object System.Windows.Forms.ToolTip
			# full Screen
			$ToolTip.SetToolTip($radiobuttonFullScreen, "This setting stretches the desktop to fill the entire display screen.
		use this if you are a stretched res player")
			$ToolTip = New-Object System.Windows.Forms.ToolTip
			# Aspect ratio
			$ToolTip.SetToolTip($radiobuttonAspectRatio, "This setting expands the desktop as much as possible while maintaining the same dimensional proportions
		, or aspect ratio, as the original image. There may be some black borders
		, but you may prefer this setting to avoid distorting the image.")
			$ToolTip.SetToolTip($radiobuttonFullScreen, "This setting stretches the desktop to fill the entire display screen.
		use this if you are a stretched res player")
			$formDisplayScalingOption.ResumeLayout()
			#endregion Generated Form Code
		
			#----------------------------------------------
		
			#Save the initial state of the form
			$InitialFormWindowState = $formDisplayScalingOption.WindowState
			#Init the OnLoad event to correct the initial state of the form
			$formDisplayScalingOption.add_Load($Form_StateCorrection_Load)
			#Clean up the control events
			$formDisplayScalingOption.add_FormClosed($Form_Cleanup_FormClosed)
			#Show the Form
			return $formDisplayScalingOption.ShowDialog()
		
